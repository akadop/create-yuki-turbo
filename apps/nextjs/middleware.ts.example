import type { MiddlewareConfig, NextMiddleware } from 'next/server'
import { NextResponse } from 'next/server'

import { auth } from '@yuki/auth'

const authRoute: string[] = ['/login', '/register']
const protectedRoute: string[] = []

export const middleware: NextMiddleware = async (req, _event) => {
  const pathName = req.nextUrl.pathname
  const session = await auth(req)

  if (session.user && authRoute.some((route) => pathName.startsWith(route))) {
    const redirectUrl = new URL('/', req.url)
    return NextResponse.redirect(redirectUrl)
  }

  if (protectedRoute.some((route) => pathName.startsWith(route))) {
    const redirectUrl = new URL('/login', req.url)
    return NextResponse.redirect(redirectUrl)
  }

  return NextResponse.next()
}

export const config = {
  matcher: [
    /*
     * Match all request paths except for the ones starting with:
     * - _next/static (static files)
     * - _next/image (image optimization files)
     * - favicon.ico, sitemap.xml, robots.txt (metadata files)
     */
    '/((?!_next|[^?]*\\.(?:html?|css|js(?!on)|jpe?g|webp|png|gif|svg|ttf|woff2?|ico|csv|docx?|xlsx?|zip|webmanifest)).*)',
    /*
     * Match all request paths starting with:
     * - api (API routes)
     */
    '/api/(.*)',
  ],
} satisfies MiddlewareConfig
